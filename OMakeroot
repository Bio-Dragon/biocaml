
open build/OCaml
DefineCommandVars()


################################################################################


.PHONY: clean distclean install install_library uninstall uninstall_library \
        test install_app uninstall_app doc install_doc dist configure print_conf

USE_OCAMLFIND = true
if $(not $(OCAMLFIND_EXISTS))
  eprintln(This project requires ocamlfind, but is was not found.)
  eprintln(You need to install ocamlfind and run "omake --configure".)
  exit 1


.INCLUDE: local_configuration.om
    if $(not $(file-exists local_configuration.om))
        echo "# Default configuration" > local_configuration.om
        echo "COMPILE_BIOCAML_APP=true" >> local_configuration.om
        echo "COMPILE_BIOCAML_TESTS=true" >> local_configuration.om
        echo "INSTALL_PREFIX=$(PWD)/usr" >> local_configuration.om

configurable(user_var,local_var) =
    if $(defined $(user_var))
        echo "User defined $(user_var): $(getvar $(user_var))"
        echo "$(local_var)=$(getvar $(user_var))" >> local_configuration.om
    else
        echo "Keeping previous $(user_var): $(getvar $(local_var))"

configure:
    configurable(BUILD_APP, COMPILE_BIOCAML_APP)
    configurable(BUILD_TESTS, COMPILE_BIOCAML_TESTS)
    configurable(PREFIX, INSTALL_PREFIX)

INSTALL_BINDIR=$(INSTALL_PREFIX)/bin/
INSTALL_DOCDIR=$(INSTALL_PREFIX)/share/doc

DefineCommandVars()
# We call DefineCommandVars so that the user can keep overriding the
# previous variables from command line

print_conf:
    echo "COMPILE_BIOCAML_APP: $(COMPILE_BIOCAML_APP)"
    echo "COMPILE_BIOCAML_TESTS: $(COMPILE_BIOCAML_TESTS)"
    echo "INSTALL_PREFIX: $(INSTALL_PREFIX)"
    echo "INSTALL_BINDIR: $(INSTALL_BINDIR)"
    echo "INSTALL_DOCDIR: $(INSTALL_DOCDIR)"


NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
BYTE_ENABLED = true

OCAMLFLAGS = -bin-annot -annot -warn-error P -thread
OCAMLCFLAGS =
OCAMLOPTFLAGS =
OCAML_LINK_FLAGS +=
OCAML_BYTE_LINK_FLAGS =
OCAML_NATIVE_LINK_FLAGS =
OCAMLFINDFLAGS = -syntax camlp4o


PROJECT_NAME= biocaml
PROJECT_VERSION= 0.3.0-dev

LIB_NAME=$(PROJECT_NAME)
LIB_VERSION=$(PROJECT_VERSION)

LIB_MODULES[] =
    biocaml
    biocaml_internal_pervasives
    biocaml_transform
    biocaml_msg
    biocaml_zip
    biocaml_bam
    biocaml_pos
    biocaml_about
    biocaml_accu
    biocaml_bar
    biocaml_bed
    biocaml_bpmap
    biocaml_cel
    biocaml_chr
    biocaml_entrez
    biocaml_fasta
    biocaml_fastq
    biocaml_genomeMap
    biocaml_gff
    biocaml_histogram
    biocaml_interval_tree
    biocaml_iset
    biocaml_jaspar
    biocaml_line
    biocaml_lines
    biocaml_math
    biocaml_phred_score
    biocaml_psl
    biocaml_pwm
    biocaml_range
    biocaml_roc
    biocaml_romanNum
    biocaml_rSet
    biocaml_sam
    biocaml_sbml
    biocaml_seq
    biocaml_solexa_score
    biocaml_sgr
    biocaml_strandName
    biocaml_track
    biocaml_tags
    biocaml_vcf
    biocaml_wig
    biocaml_mzData
    biocaml_table
    biocaml_transcripts

LIB_STUBS= biocaml_pwm_stub biocaml_mzData_stubs
LIB_DESCRIPTION=The OCaml Bioinformatics Library <http://biocaml.org>
LIB_SOURCES= $(add-wrapper src/lib/, .ml, $(LIB_MODULES))
DEPENDENCIES=core threads zip unix xmlm pcre cfstream
PACKAGES= $(DEPENDENCIES) sexplib.syntax


APP_NAME=$(PROJECT_NAME)
APP_MODULES[]=
    biocaml_app_bed_operations
    biocaml_app_random
    biocaml_app_common
    biocaml_app_transform
    biocaml_app_count_alignments
    biocaml_main
    biocaml_app_demux
    biocaml_app_entrez
APP_PACKAGES= flow

UNIT_TESTS_NAME=biocaml_unit_test
UNIT_TESTS[]=
    test_bed
    test_fasta
    test_gff
    test_interval_tree
    test_phred_score
    test_pwm
    test_roc
    test_rset
    test_sam
    test_table
    test_track
    test_vcf
    test_wig
    test_zip
UNIT_TESTS_PACKAGES= oUnit

# Run the tests' main executable
test: _build/tests/$(UNIT_TESTS_NAME)
    $<

BENCHMARKS_NAME=biocaml_benchmarks
BENCHMARKS[]=
    benchmark_zip
BENCHMARKS_PACKAGES=

clean:
  rm -fr _build

distclean: clean
  rm -fr OMakefile.omc OMakeroot.omc .omakedb .omakedb.lock local_configuration.om

install: install_library install_app
uninstall: uninstall_library uninstall_app

install_app: _build/app/$(APP_NAME)
    echo "Installing $< in $(INSTALL_BINDIR)"
    mkdir -p $(INSTALL_BINDIR)
    install $< $(INSTALL_BINDIR)

uninstall_app:
    echo "Removing $(APP_NAME) from $(BINDIR)"
    rm -f $(INSTALL_BINDIR)/$(APP_NAME)

#
# Create _build/dist/biocaml-x.y.z.tar.gz
#
DIST_FILES=Changes INSTALL LICENSE OMakeroot README.md src
dist:
    rm -fr _build/dist/
    mkdir -p _build/dist/$(PROJECT_NAME)-$(PROJECT_VERSION)/
    cp -r $(DIST_FILES) _build/dist/$(PROJECT_NAME)-$(PROJECT_VERSION)/
    cd _build/dist/ && tar cvfz $(PROJECT_NAME)-$(PROJECT_VERSION).tar.gz \
                                $(PROJECT_NAME)-$(PROJECT_VERSION) \
        && md5sum $(PROJECT_NAME)-$(PROJECT_VERSION).tar.gz > \
             _build/dist/$(PROJECT_NAME)-$(PROJECT_VERSION).tar.gz.md5
             # â†’ wierd path to the file, required because OMake interprets it


TAGS_INCLUDE=-I $(shell ocamlfind query sexplib.syntax) -I $(shell ocamlfind query type_conv)
TAGS_LINK=-pa pa_type_conv.cma -pa pa_sexp_conv.cma
TAGS_SOURCES=$(shell find src -name "*.ml")
TAGS:
    otags $(TAGS_INCLUDE) $(TAGS_LINK) -o TAGS $(TAGS_SOURCES)

################################################################################
# Biocaml is a bit more complex than what OCamlLibrary can provide so
# we define this function:
#
public.OCamlLibraryWithCFiles(name, files, c_files) =
    protected.name = $(file $(name))
    protected.OFILES   = $(addsuffix $(EXT_OBJ), $(files))
    protected.CMOFILES = $(addsuffix .cmo, $(files))
    protected.CMXFILES = $(addsuffix .cmx, $(files))
    protected.CLIB      = $(file $(name)$(EXT_LIB))
    protected.BYTELIB   = $(file $(name).cma)
    protected.NATIVELIB = $(file $(name).cmxa)
    protected.STUB_C_FILES= $(addsuffix .o, $(c_files))
    foreach(f => ..., $(c_files))
        $(f).o: $(f).c
            ocamlc -c $<
    #
    # Thanks to Gerd's recipes + OCaml.om in OMake's std-lib
    # http://www.camlcity.org/knowledge/kb_001_omake_recipes.html
    if $(BYTE_ENABLED)
        $(BYTELIB): $(CMOFILES) $(STUB_C_FILES)
            ocamlmklib -o $(name) $(OCamlLinkSort $(CMOFILES)) $(STUB_C_FILES) \
                 $(OCAML_BYTE_LINK_FLAGS)
    if $(NATIVE_ENABLED)
        $(NATIVELIB) $(CLIB): $(CMXFILES) $(OFILES) $(STUB_C_FILES)
            ocamlmklib -custom -o $(name)  $(OCamlLinkSort $(CMXFILES)) $(STUB_C_FILES) \
                 $(OCAML_NATIVE_LINK_FLAGS)
    return $(array $(if $(NATIVE_ENABLED), $(NATIVELIB)), \
             $(if $(NATIVE_ENABLED), $(CLIB)), $(if $(BYTE_ENABLED), $(BYTELIB)))

################################################################################
# Build of the documentation:
#
DOCLIB_DIR=_build/doclib/

$(DOCLIB_DIR)/biocaml.css: src/doc/biocaml.css
    mkdir -p _build/doclib
    cp src/doc/biocaml.css $@

$(DOCLIB_DIR)/index.html: $(DOCLIB_DIR)/biocaml.css _build/biohtml.cmo _build/lib/$(LIB_NAME).cma
    cp src/doc/figures/* $(DOCLIB_DIR)/
    ocamlfind ocamldoc \
        -g _build/biohtml.cmo \
        -css-style biocaml.css \
        -syntax camlp4o -package xmlm,zip,pcre,core,cfstream,sexplib.syntax \
        -charset UTF-8 -d $(DOCLIB_DIR) -t "The Biocaml Library" \
        -keep-code -colorize-code _build/lib/*.mli _build/lib/*.ml \
        -sort -I _build/lib/. \
        -intro src/doc/intro.txt

_build/biohtml.cmo: src/odoc/biohtml.ml
    ocamlfind ocamlc -c src/odoc/biohtml.ml -o $@ -I +ocamldoc -I +compiler-libs

doc: $(DOCLIB_DIR)/index.html

install_doc: doc
    echo "Installing documentation in $(INSTALL_DOCDIR)/biocaml"
    rm -fr $(INSTALL_DOCDIR)/biocaml
    mkdir -p $(INSTALL_DOCDIR)
    cp -r _build/doclib $(INSTALL_DOCDIR)/biocaml

################################################################################
# Definition of the sub-directories
#
ensure_path(path) =
    mkdir -p $(path)

.SUBDIRS: .
    ensure_path(_build/lib)
    ensure_path(_build/app)
    ensure_path(_build/tests)
    ensure_path(_build/benchmark)
    vmount(-l, src/, _build/)

    .SUBDIRS: _build/lib
        OCAMLPACKS[] = $(PACKAGES)
        biocaml_about.ml: :value: $(PROJECT_VERSION)
            echo '(** Version string of the library: ["$(PROJECT_VERSION)"] *)' > $@
            echo 'let version = "$(PROJECT_VERSION)"' >> $@
        META:
            echo "description = \"$(LIB_DESCRIPTION)\"" > META
            echo "version = \"$(LIB_VERSION)\"" >> META
            echo "archive(byte) = \"$(LIB_NAME).cma\"" >> META
            echo "archive(native) = \"$(LIB_NAME).cmxa\"" >> META
            echo "requires = \"$(DEPENDENCIES)\"" >> META
        install_library: $(LIB_NAME).cma $(LIB_NAME).cmxa META uninstall_library
            ocamlfind install $(LIB_NAME) META \
                *.cm[iox] *.o $(LIB_NAME).cma $(LIB_NAME).cmxa *.a -dll *.so
        uninstall_library:
            ocamlfind remove $(LIB_NAME)
        .DEFAULT: $(OCamlLibraryWithCFiles biocaml, $(LIB_MODULES), $(LIB_STUBS))

    .SUBDIRS: _build/app
        OCAML_LIBS = ../lib/biocaml
        OCAMLINCLUDES += $(dir ../lib/)
        OCAMLPACKS[] = $(PACKAGES) $(APP_PACKAGES)
        %.ml: ../lib/biocaml.cma
        if $(COMPILE_BIOCAML_APP)
            echo "conf: Building biocaml application"
            .DEFAULT: $(OCamlProgram $(APP_NAME), $(APP_MODULES))

    .SUBDIRS: _build/tests
        OCAML_LIBS = ../lib/biocaml
        OCAMLINCLUDES += $(dir ../lib/)
        OCAMLPACKS[] = $(PACKAGES) $(UNIT_TESTS_PACKAGES)
        %.ml: ../lib/biocaml.cma
        if $(COMPILE_BIOCAML_TESTS)
            echo "conf: Building biocaml tests"
            .DEFAULT: $(OCamlProgram $(UNIT_TESTS_NAME), main $(UNIT_TESTS))

    .SUBDIRS: _build/benchmark
        OCAML_LIBS = ../lib/biocaml
        OCAMLINCLUDES += $(dir ../lib/)
        OCAMLPACKS[] = $(PACKAGES) $(BENCHMARKS_PACKAGES)
        %.ml: ../lib/biocaml.cma
        if $(COMPILE_BIOCAML_TESTS)
            echo "conf: Building biocaml benchmarks"
            .DEFAULT: $(OCamlProgram $(BENCHMARKS_NAME), $(BENCHMARKS))